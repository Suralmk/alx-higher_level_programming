# test case for 0-add_integer.txt
# Surafel Melaku

usage of 0-add_integer.py
=========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.


    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 3)
    8

::

    >>> add_integer(5, -1)
    4

Also functioal for float data types


    >>> add_integer(1., 1.0)
    2

Note that floats are casted to ints before addition is performed.


    >>> add_integer(2.5, 2.2)
    4

::

    >>> add_integer(-2.9, -0.2)
    -3

Floating and non-floating point values can be combined.

::

    >>> add_integer(5.3, -8)
    -3

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

how the function works for non-numbers
======================================

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

function fail when infinity is proceded

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

with Nan number

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
